#include <bits/stdc++.h>
using namespace std;
const int MAXN = 30000;

struct couleurs
{
   int nb[3];
};

int tailleSousArbre[MAXN];
vector <int> adj[MAXN];

int DFS(int noeud)
{
   for (int i = 0 ; i < adj[noeud].size() ; i++)
   {
      tailleSousArbre[noeud] += DFS(adj[noeud][i]);
   }
   tailleSousArbre[noeud]++;
   return tailleSousArbre[noeud];
}

int couleur[MAXN];
void parcours(int noeud , int couleurMettre , couleurs actu)
{
   //cout<<actu.nb[0]<<" "<<actu.nb[1]<<" "<<actu.nb[2]<<endl;

   couleur[noeud] = couleurMettre;
   //cout<<noeud<<" "<<adj[noeud].size()<<endl;
   if (adj[noeud].size() == 0) return;
   if (adj[noeud].size() == 1)
   {
      int in = -1;
      for (int i = 0 ; i < 3 ; i++)
      {
         if (i != couleurMettre)
         {
            if (in == -1)
            {
               in = i;
            }
            else if (actu.nb[i] > actu.nb[in])
            {
               in = i;
            }
         }
      }
      actu.nb[in]--;
      parcours(adj[noeud][0] , in , actu);
   }
   else
   {
      couleurs gauche;
      couleurs droite;
      int inGauche = -1;
      int inDroite = -1;
      for (int i = 0 ; i < 3 ; i++)
      {
         if (i == couleurMettre) continue;
         if (inGauche == -1) inGauche = i;
         else if (inDroite == -1) inDroite = i;
      }
      int voisinGauche = adj[noeud][0];
      int voisinDroite = adj[noeud][1];
      gauche.nb[inGauche] = tailleSousArbre[voisinGauche] /3 + (tailleSousArbre[voisinGauche] % 3 != 0);
      droite.nb[inGauche] = actu.nb[inGauche] - gauche.nb[inGauche];

      droite.nb[inDroite] = tailleSousArbre[voisinDroite] / 3 + (tailleSousArbre[voisinDroite] % 3 != 0);
      gauche.nb[inDroite] = actu.nb[inDroite] - droite.nb[inDroite];

      gauche.nb[couleurMettre] = tailleSousArbre[voisinGauche] - gauche.nb[inGauche] - gauche.nb[inDroite];
      droite.nb[couleurMettre] = tailleSousArbre[voisinDroite] - droite.nb[inGauche] - droite.nb[inDroite];

      gauche.nb[inGauche]--;
      droite.nb[inDroite]--;
      parcours(voisinGauche , inGauche , gauche);
      parcours(voisinDroite , inDroite , droite);
   }
}
int main()
{
   int nbNoeuds;
   cin>>nbNoeuds;
   for (int i = 0 ; i < nbNoeuds - 1; i++)
   {
      int A , B;
      cin>>A>>B;
      A--;
      B--;
      adj[B].push_back(A);
   }
   DFS(0);
   couleurs nouveau;
   nouveau.nb[0] = nbNoeuds / 3 + (nbNoeuds % 3 != 0);
   nouveau.nb[1] = nbNoeuds / 3 + (nbNoeuds % 3 == 2);
   nouveau.nb[2] = nbNoeuds / 3;
   nouveau.nb[0]--;
   parcours(0,0,nouveau);
   for (int i = 0 ; i < nbNoeuds ; i++)
   {
      cout<<couleur[i]+1<<" ";
   }
   cout<<endl;
}
